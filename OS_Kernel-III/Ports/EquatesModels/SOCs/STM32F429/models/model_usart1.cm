/*
; model_usart1.
; =============

;------------------------------------------------------------------------
; Author:	Franzi Edo.	The 2006-06-28
; Modifs:
;
; SVN:
; $Author:: efr               $:  Author of last commit
; $Rev:: 166                  $:  Revision of last commit
; $Date:: 2017-07-02 17:51:46#$:  Date of last commit
;
; Project:	uKOS
; Goal:		Model for controlling the "usart1" device.
;
;   (c) 1992-2017, Franzi Edo.
;   --------------------------
;                                              __ ______  _____
;   Franzi Edo.                         __  __/ //_/ __ \/ ___/
;   5-Route de Cheseaux                / / / / ,< / / / /\__ \
;   CH 1400 Cheseaux-NorÃ©az           / /_/ / /| / /_/ /___/ /
;                                     \__,_/_/ |_\____//____/
;   edo.franzi@ukos.ch
;
;   This program is free software: you can redistribute it and/or modify
;   it under the terms of the GNU Affero General Public License as published by
;   the Free Software Foundation, either version 3 of the License, or
;   (at your option) any later version.
;
;   This program is distributed in the hope that it will be useful,
;   but WITHOUT ANY WARRANTY; without even the implied warranty of
;   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
;   GNU Affero General Public License for more details.
;
;   You should have received a copy of the GNU Affero General Public License
;   along with this program. If not, see <http://www.gnu.org/licenses/>.
;
;------------------------------------------------------------------------
*/

extern				void		(*vExce_indIntVectors[KNBINTERRUPTIONS])(void);
extern	volatile	uint16_t	vTimeException;
static	volatile	bool_t		vSending = FALSE;
static	volatile	bool_t		vRXSema  = FALSE;
static	volatile	bool_t		vTXSema  = FALSE;
static	volatile	uint8_t		vSndBuffer[KUSART1LNSNDBUF];
static	volatile	uint8_t		vRecBuffer[KUSART1LNRECBUF];
static	volatile	uint8_t		*vRRecBuffer;
static	volatile	uint8_t		*vWRecBuffer;
static	volatile	uint8_t		*vRSndBuffer;
static	volatile	uint8_t		*vWSndBuffer;
static	volatile	int32_t		vStatus = KUSART1NOERR;

#if (defined(__WITHSEMA__))
static	volatile	sema_t		*vSeHandleRX[1];
static	volatile	sema_t		*vSeHandleTX[1];

LOC_CONST_STRG(aStrSemaphoreRX[]) =	KSEMAPHORE_USART1RX;
LOC_CONST_STRG(aStrSemaphoreTX[]) =	KSEMAPHORE_USART1TX;
#endif

// Prototypes
// ==========

static	void	aUSART1_IRQHandler(void);

/*
 * \brief usart1_init
 *
 * - Initialize the manager
 *
 */
void	usart1_init(void) {

	RCC->APB2ENR |= RCC_APB2ENR_USART1EN;

// Create the semaphores

	#if (defined(__WITHSEMA__))
	kern_createSyncSemaphore(aStrSemaphoreRX, &vSeHandleRX[0]);
	kern_createSyncSemaphore(aStrSemaphoreTX, &vSeHandleTX[0]);
	#endif

// Initialize the circular buffers (snd) and (rec)

	vRSndBuffer = vWSndBuffer = vSndBuffer;
	vRRecBuffer = vWRecBuffer = vRecBuffer;

// Initialize the UART (Rx and Tx) and set it to 8-bits, 1-stop-bits, default baudrate and no parity

	vExce_indIntVectors[USART1_IRQn] = aUSART1_IRQHandler;

	NVIC->IP[USART1_IRQn]  = (KINT_LEVEL_COMM<<4);
	NVIC->ISER[1]         |= (1<<(USART1_IRQn & 0x1F));

    USART1->BRR	 = BAUDRATE(KFREQUENCY_USART1, KDEFAULT_BAUDRATE);
	USART1->CR1	 = (USART_CR1_UE | USART_CR1_TE | USART_CR1_RE);
	USART1->SR  &= ~USART_SR_RXNE;
	USART1->SR  &= ~USART_SR_TXE;
	USART1->CR1 |= USART_CR1_RXNEIE;

	cb_init();
}

/*
 * \brief usart1_configure
 *
 * - Configure the manager
 *
 */
int32_t	usart1_configure(const cnfUsart1_t *configure) {

	INTERRUPTION_OFF;
	USART1->CR1 &= ~(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS);
 	switch (configure->oNBits) {
		case K7BIT: {
			USART1->CR1 |= USART_CR1_PCE;
			break;
		}
		default:
		case K8BIT: {
			if (configure->oParity != KNONE) {
				USART1->CR1 |= USART_CR1_M;
			}
			break;
		}
	}

	switch (configure->oParity) {
		case KEVEN: { USART1->CR1 |= USART_CR1_PCE;                break; }
		case KODD:  { USART1->CR1 |= USART_CR1_PCE | USART_CR1_PS; break; }
		default:
		case KNONE: { 											   break; }
	}

	USART1->CR2 &= ~(USART_CR2_STOP_1 | USART_CR2_STOP_0);
 	if (configure->oStopBits == K2STBIT) {
 		USART1->CR2 |= USART_CR2_STOP_1;
 	}

	switch (configure->oBaudRate) {
		case KBDDEFAULT:	{ USART1->BRR = BAUDRATE(KFREQUENCY_USART1, KDEFAULT_BAUDRATE); break; }
		case KBD2400:		{ USART1->BRR = BAUDRATE(KFREQUENCY_USART1, 2400);              break; }
		case KBD4800:		{ USART1->BRR = BAUDRATE(KFREQUENCY_USART1, 4800);              break; }
		case KBD9600:		{ USART1->BRR = BAUDRATE(KFREQUENCY_USART1, 9600);              break; }
		case KBD19200:		{ USART1->BRR = BAUDRATE(KFREQUENCY_USART1, 19200);             break; }
		case KBD38400:		{ USART1->BRR = BAUDRATE(KFREQUENCY_USART1, 38400);             break; }
		case KBD57600:		{ USART1->BRR = BAUDRATE(KFREQUENCY_USART1, 57600);             break; }
		case KBD115200:		{ USART1->BRR = BAUDRATE(KFREQUENCY_USART1, 115200);            break; }
		case KBD230400:		{ USART1->BRR = BAUDRATE(KFREQUENCY_USART1, 230400);            break; }
		case KBD460800:		{ USART1->BRR = BAUDRATE(KFREQUENCY_USART1, 460800);            break; }
		case KBD500000:		{ USART1->BRR = BAUDRATE(KFREQUENCY_USART1, 500000);            break; }
		case KBD921600:		{ USART1->BRR = BAUDRATE(KFREQUENCY_USART1, 921600);            break; }
		case KBD1000000:	{ USART1->BRR = BAUDRATE(KFREQUENCY_USART1, 1000000);           break; }
		case KBD1500000:	{ USART1->BRR = BAUDRATE(KFREQUENCY_USART1, 1500000);           break; }
		case KBD1843200:	{ USART1->BRR = BAUDRATE(KFREQUENCY_USART1, 1843200);           break; }
		case KBD2000000:	{ USART1->BRR = BAUDRATE(KFREQUENCY_USART1, 2000000);           break; }
		case KBD2500000:	{ USART1->BRR = BAUDRATE(KFREQUENCY_USART1, 2500000);           break; }
		case KBD3000000:	{ USART1->BRR = BAUDRATE(KFREQUENCY_USART1, 3000000);           break; }
		default:			{ USART1->BRR = BAUDRATE(KFREQUENCY_USART1, KDEFAULT_BAUDRATE); break; }
	}

	vRXSema = ((configure->oKernSync & (1<<BRXSEMA)) != 0) ? TRUE : FALSE;
	vTXSema = ((configure->oKernSync & (1<<BTXSEMA)) != 0) ? TRUE : FALSE;
	RETURN_INT_RESTORED(KUSART1NOERR);
}

/*
 * \brief usart1_write
 *
 * - Write a buffer
 *
 */
int32_t	usart1_write(const uint8_t *buffer, uint32_t size) {
			uint32_t	i, newSize;
	static	bool_t		terminate = FALSE, busy = FALSE;

	INTERRUPTION_OFF;
	if ((vSending) || (busy)) { RETURN_INT_RESTORED(KUSART1SEPRO); }
	if (size == 0) 			  { RETURN_INT_RESTORED(KUSART1LNBU0); }

	busy = TRUE;
	INTERRUPTION_RESTORED;

	while (!terminate) {
		while (vSending) { kern_switchFast(); }

		if (size > KUSART1LNSNDBUF) { newSize = KUSART1LNSNDBUF; size -= KUSART1LNSNDBUF; }
		else						{ newSize = size; terminate = TRUE; 				  }

// Copy the input buffer into the send one and start the transfer
// Enable the TX interruption

		vSending = TRUE;
		for (i = 0; i < newSize; i++) {
			vSndBuffer[i] = buffer[i];
		}

		vWSndBuffer = vSndBuffer + newSize;
		vRSndBuffer = vSndBuffer;
		buffer += newSize;

		USART1->CR1 |= USART_CR1_TXEIE;
	}
	busy = FALSE;
	terminate = FALSE;
	return (KUSART1NOERR);
}

/*
 * \brief usart1_read
 *
 * - Read n x bytes
 *
 */
int32_t	usart1_read(uint8_t *buffer, uint32_t *size) {
	int32_t		status;
	uint32_t	i;

	INTERRUPTION_OFF;
	status  = vStatus;
	vStatus = KUSART1NOERR;

// Interruption problem: buffer full, Framing error, Overrun error, ..
// In this case, we return 0-bytes read with the corresponding error.
// The Error is then cancelled for the next time.

	if (status != KUSART1NOERR)			{ *size = 0; RETURN_INT_RESTORED(status); 	   }
	if (*size == 0) 					{ *size = 0; RETURN_INT_RESTORED(KUSART1NOERR); }
	if (vRRecBuffer == vWRecBuffer)     { *size = 0; RETURN_INT_RESTORED(KUSART1RBUEM); }

	for (i = 0; i < *size; i++) {
		if (vRRecBuffer == vWRecBuffer) { *size = i; RETURN_INT_RESTORED(KUSART1NOERR); }

		*buffer++ = *vRRecBuffer++;
		if (vRRecBuffer == (vRecBuffer + KUSART1LNRECBUF)) {
			vRRecBuffer = vRecBuffer;
		}
	}
	RETURN_INT_RESTORED(status);
}

/*
 * \brief usart1_flush
 *
 * - Flush the usart1 manager
 *
 */
int32_t	usart1_flush(void) {
	volatile	sema_t	*semaphore;

// Initialize the circular buffers (rec) and restart the associated semaphore

	INTERRUPTION_OFF;
	vRRecBuffer = vWRecBuffer = vRecBuffer;
	kern_getSemaphoreById(KSEMAPHORE_USART1RX, &semaphore);
	kern_restartSemaphore(semaphore);
	RETURN_INT_RESTORED(KUSART1NOERR);
}

// Local routines
// ==============

/*
 * \brief aUSART1_IRQHandler
 *
 * - Interruption RX-TX
 *
 */
static	void	aUSART1_IRQHandler(void) {
	volatile	uint32_t	IIR;

	IIR = USART1->SR;
    if ((IIR & USART_SR_RXNE) != 0) {

// RX interruption

		if ((IIR & USART_SR_ORE) != 0) { vStatus = KUSART1EROVR; }
		if ((IIR & USART_SR_FE)  != 0) { vStatus = KUSART1ERFRA; }
		if ((IIR & USART_SR_PE)  != 0) { vStatus = KUSART1ERFRA; }

// Read the data and signal the event

		*vWRecBuffer++ = (uint8_t)USART1->DR;
		if (vWRecBuffer == vRRecBuffer) {
			vStatus = KUSART1RBFUL;
		}
		if (vWRecBuffer == (vRecBuffer + KUSART1LNRECBUF)) {
			vWRecBuffer = vRecBuffer;
		}

		#if (defined(__WITHSEMA__) && defined(__USART1_SEMA_RX__))
		if (vRXSema) { kern_signalSemaphore(vSeHandleRX[0]); }
		#endif
	}

    if (((IIR & USART_SR_TXE) && (USART1->CR1 & USART_CR1_TXEIE)) != 0) {

// TX interruption

		if (cb_CTSCheck()) {
			USART1->DR = (uint16_t)*vRSndBuffer++;
			if (vRSndBuffer == vWSndBuffer) {

// Terminated; disable the Tx interruption

				USART1->CR1 &= ~USART_CR1_TXEIE;
				vSending = FALSE;

				#if (defined(__WITHSEMA__) && defined(__USART1_SEMA_TX__))
				if (vTXSema) { kern_signalSemaphore(vSeHandleTX[0]); }
				#endif
			}
		}

// Continue to send data

	}

	PREEMPTION;
}

