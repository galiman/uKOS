uKOS-III Pack v. 4.8.0 2017/08/20
=================================

(c) Franzi Edo. 2016

Compilers/tools notice for OSX & Ubuntu
.......................................

OSX 10.10.x & Ubuntu 16.04 LTS

Supported cpus and compilers: necessary packages

				icyflex-1			cpu32			coldfire		blackfin		arm	(M3-M4)						arm	(M7)		All 8-bits cpus
binutil			(csem)binutils-2.20	binutils-2.28	binutils-2.28	binutils-2.28	binutils-2.28					Launchpad tool	-
gcc	(OSX)		(csem)gcc-4.6.4		gcc-7.2.0		gcc-7.2.0		gcc-7.2.0		gcc-7.2.0 -> gcc-7.2.0.patch	Launchpad tool	-
gcc	(Ubuntu)	(csem)gcc-4.6.4		gcc-5.4.0		gcc-5.4.0		gcc-5.4.0		gcc-5.4.0 -> gcc-5.4.0.patch	Launchpad tool	-
newlib			(csem)newlib-1.18.0	newlib-2.5.0	newlib-2.5.0	newlib-2.5.0	newlib-2.5.0					Launchpad tool	-
gdb				-					gdb-8.0.0		gdb-8.0.0		gdb-8.0.0		gdb-8.0.0						Launchpad tool	-
openocd			-					-				-				-				openocd-0.10.0-dev				-				-
fragment		-					t-m68kelf		t-m68kelf		-				t-arm-elf						Launchpad tool	-
gputils			-					-				-				-				-								-				gputils-1.5.0
sdcc			-					-				-				-				-								-				sdcc-3.6.0
pk2cmdv1		-					-				-				-				-								-				pk2cmdv1.20LinuxMacSource

Toolchains:

ukos_boost_libraries	for building the boost library
ukos_icfx1				for building icyflex-1 tools
ukos_bfin				for building blackfin tools
ukos_coldfire			for building coldfire tools
ukos_cpu32				for building cpu32 tools
ukos_arm_eabi			for building arm tools
ukos_gputils			for building 8-bits cpu assembler tools
ukos_sdcc				for building 8-bits cpu tools
ukos_pic				for building the PIC probe
ukos_D2XX				for building the ftdi driver
ukos_openocd			for building the openocd

Necessary packages used for building 32-bit uKOS kernel/applications

# wget ftp://sourceware.org/pub/binutils/releases/binutils-2.29.tar.bz2
# wget ftp://ftp.gnu.org/pub/gnu/gcc/gcc-7.2.0/gcc-7.2.0.tar.bz2
# wget ftp://ftp.gnu.org/pub/gnu/gcc/gcc-5.4.0/gcc-5.4.0.tar.bz2
# wget ftp://ftp.gnu.org/pub/gnu/gdb/gdb-8.0.0.tar.gz
# wget ftp://sourceware.org/pub/newlib/newlib-2.5.0.tar.gz
# wget https://www.intra2net.com/en/developer/libftdi/download/libftdi1-1.4.tar.bz2
# wget http://www.ftdichip.com/Drivers/D2XX/Linux/libftd2xx-x86_64-1.4.6.tgz
# wget http://www.ftdichip.com/Drivers/D2XX/MacOSX/D2XX1.4.4.dmg
# git clone git://git.code.sf.net/p/openocd/code openocd-0.10.0
# wget http://www.ivarch.com/programs/sources/pv-1.6.6.tar.bz2
# wget http://prdownloads.sourceforge.net/swig/swig-3.0.12.tar.gz
# https://launchpad.net/gcc-arm-embedded/5.0/5-2016-q3-update/+download/gcc-arm-none-eabi-5_4-2016q3-20160926-mac.tar.bz2
# https://launchpad.net/gcc-arm-embedded/5.0/5-2016-q3-update/+download/gcc-arm-none-eabi-5_4-2016q3-20160926-linux.tar.bz2

Necessary packages used for building 8-bit uKOS applications

# https://sourceforge.net/projects/boost/files/boost/1.64.0/boost_1_64_0.tar.bz2/download
# wget https://github.com/psmay/pk2cmd/archive/master.zip
# wget http://people.virginia.edu/~ll2bf/docs/nix/img/pk2cmdv1.20linuxmacsource.tar.gz
# http://sourceforge.net/projects/sdcc/files/snapshot_builds/sdcc-src/sdcc-src-20160501-9584.tar.bz2/download

Necessary packages for documenting uKOS

# wget ftp://ftp.stack.nl/pub/users/dimitri/doxygen-1.8.13.src.tar.gz
# wget http://www.graphviz.org/pub/graphviz/stable/SOURCES/graphviz-2.40.1.tar.gz

tar xjf binutils-2.28.tar.bz2
tar xjf gcc-7.2.0.tar.bz2
tar xjf gcc-5.4.0.tar.bz2
tar xzf gdb-8.0.0.tar.gz
tar xzf newlib-2.5.0.tar.gz
tar xzf libftd1.1.3.tar.gz
tar xjf openocd-0.10.0.tar.bz2
tar xjf pv-1.6.6.tar.bz2
tar xjf boost_1_64_0.tar.bz2
tar xzf gputils-1.5.0-1.tar.gz
tar xzf pk2cmdv1.20linuxmacsource.tar.gz
tar xjf sdcc-3.6.0-rc2.tar.bz2
tar xzf doxygen-1.8.13.src.tar.gz
tar xzf graphviz-2.40.1.tar.gz
tar xzf swig-3.0.12.tar.gz

mv release libftd2xx-1.4.6
mv boost_1_64_0 boost-1.64.0




OSX installation
----------------

Necessary settings for the environment:
.......................................

PATH_PORTS_ROOT		path to the Macports tools
PATH_TOOLS_ROOT		path to the development tools (GCC, etc.)
PATH_UKOS_ROOT		path to the uKOS sources

Example for the .bash_profile
.............................

Project environment
...................

PATH_PORTS_ROOT=/opt/local
PATH_UKOS_ROOT=${HOME}/DATA/DATA_Private/uKOS_Project/uKOS_Soft

PATH_UKOS_KERNEL=${PATH_UKOS_ROOT}/OS_Kernel-III

Tool environment
................

PATH_TOOLS_ROOT=/opt/uKOS
PATH_TOOLS_GCC=${PATH_TOOLS_ROOT}
PATH_TOOLS_UNIX=${PATH_TOOLS_ROOT}/bin
PATH_FTDI_INCLUDES=/usr/local/include
PATH_FTDI_LIBRARIES=/usr/local/lib

PATH_GCC_ICYFLEX=${PATH_TOOLS_GCC}/cross/gcc-4.6.4/icyflex1
PATH_GCC_COLFIRE=${PATH_TOOLS_GCC}/cross/gcc-7.2.0/coldfire
PATH_GCC_MC6833X=${PATH_TOOLS_GCC}/cross/gcc-7.2.0/cpu32
PATH_GCC_BLAKFIN=${PATH_TOOLS_GCC}/cross/gcc-7.2.0/blackfin
PATH_GCC_CORTEX3=${PATH_TOOLS_GCC}/cross/gcc-7.2.0/arm
PATH_GCC_CORTEX7=${PATH_TOOLS_GCC}/cross/gcc-M7-5.4.1/arm
PATH_GCC_RISC532=${PATH_TOOLS_GCC}/cross/gcc-5.2.0/risc5
PATH_GCC_CNATIVE=${PATH_TOOLS_GCC}/cross/gcc-7.2.0/osx
PATH_GCC_GPUTILS=${PATH_TOOLS_GCC}/cross/gputils-1.5.0-1
PATH_GCC_SDCCPIC=${PATH_TOOLS_GCC}/cross/sdcc-3.6.0

PATH=${PATH}:${PATH_TOOLS_UNIX}
PATH=${PATH}:${PATH_TOOLS_GCC}/cross/openocd-0.10.0/bin
PATH=${PATH}:${PATH_TOOLS_GCC}/cross/doxygen-1.8.13/bin
PATH=${PATH}:${PATH_TOOLS_GCC}/cross/graphviz-2.40.1/bin
PATH=${PATH}:${PATH_GCC_ICYFLEX}/bin
PATH=${PATH}:${PATH_GCC_COLFIRE}/bin
PATH=${PATH}:${PATH_GCC_MC6833X}/bin
PATH=${PATH}:${PATH_GCC_BLAKFIN}/bin
PATH=${PATH}:${PATH_GCC_CORTEX3}/bin
PATH=${PATH}:${PATH_GCC_CORTEX7}/bin
PATH=${PATH}:${PATH_GCC_RISC532}/bin
PATH=${PATH}:${PATH_GCC_GPUTILS}/bin
PATH=${PATH}:${PATH_GCC_SDCCPIC}/bin

export PATH_FTDI_INCLUDES
export PATH_FTDI_LIBRARIES
export PATH_TOOLS_GCC
export PATH_TOOLS_UNIX
export PATH_UKOS_KERNEL
export PATH_GCC_ICYFLEX
export PATH_GCC_COLFIRE
export PATH_GCC_MC6833X
export PATH_GCC_BLAKFIN
export PATH_GCC_CORTEX3
export PATH_GCC_CORTEX7
export PATH_GCC_RISC532
export PATH_GCC_GPUTILS
export PATH_GCC_SDCCPIC

export MANPATH
export PATH

Port (macports) installation (Xcode with the line tool has to be installed first !!! version 7.2 & not 7.2.1 !!!)
.................................................................................................................

xcode-select --install

automake
cmake
libftdi1
libtool
autoconf
pkgconfig
wget
coreutils

Paths to set-up in the eclipse
..............................

PATH_GCC_XYZ = ${PATH_TOOLS_GCC}/cross/gcc-a.b.c/xyz
PATH_BIN     = ${PATH_TOOLS_UNIX}
PATH_SRC     = ${PATH_UKOS_KERNEL}

Sequence of operations
......................

1. Create the .bash_profile
2. Install XCode and the command line tools (xcode-select --install)
3. Install Macports
	Install the package: apple-gcc42 (Only for Xcode version lower than the 5.1.1)
	Install the package: automake
	Install the package: cmake
	Install the package: libftdi1
	Install the package: libtool
	Install the package: autoconf
	Install the package: pkgconfig
	Install the package: wget
	Install the package: coreutils

4. Build the gcc's versions:
	sh ukos_OSX_native.sh
	sh ukos_arm_eabi.sh
	sh ukos_bfin.sh
	sh ukos_coldfire.sh
	sh ukos_cpu32.sh
	sh ukos_icfx1.sh

5. Build the openocd:
	sh ukos_D2XX.sh
	sh ukos_openocd.sh

6. Build the graphviz & doxygen:
	sh ukos_graphviz.sh
	sh ukos_doxygen.sh

7. Build the tools for 8-bits cpus:
	sh ukos_boost_libraries
	sh ukos_gputils.sh
	sh ukos_sdcc.sh
	sh ukos_pic.sh

Prepare for your target
.......................

In the folder ${PATH_UKOS_KERNEL}/Systems you can find some sh scripts to
set-up the environment for your target. Just execute one of them.

sh clean	for cleaning the project
sh build	for building the project

Hint for checking the gcc created libraries:
  arm-none-eabi-gcc -print-multi-lib




Linux ubuntu 16.04 installation
-------------------------------

Necessary settings for the environment:
.......................................

PATH_TOOLS_ROOT		path to the development tools (GCC, etc.)
PATH_UKOS_ROOT		path to the uKOS sources

Example for the .bash_aliases
.............................

Project environment
...................

PATH_UKOS_ROOT=${HOME}/DATA/DATA_Private/uKOS_Project/uKOS_Soft
PATH_UKOS_KERNEL=${PATH_UKOS_ROOT}/OS_Kernel-III

Tool environment
................

PATH_TOOLS_ROOT=${HOME}/uKOS_Tools
PATH_TOOLS_GCC=${PATH_TOOLS_ROOT}
PATH_TOOLS_UNIX=${PATH_TOOLS_ROOT}/bin
PATH_FTDI_INCLUDES=${PATH_TOOLS_GCC}/Packages/libftd2xx-1.3.6
PATH_FTDI_LIBRARIES=${PATH_TOOLS_GCC}/Packages/libftd2xx-1.3.6/build

PATH_GCC_ICYFLEX=${PATH_TOOLS_GCC}/cross/gcc-4.6.4/icyflex1
PATH_GCC_COLFIRE=${PATH_TOOLS_GCC}/cross/gcc-7.2.0/coldfire
PATH_GCC_MC6833X=${PATH_TOOLS_GCC}/cross/gcc-7.2.0/cpu32
PATH_GCC_BLAKFIN=${PATH_TOOLS_GCC}/cross/gcc-7.2.0/blackfin
PATH_GCC_CORTEX3=${PATH_TOOLS_GCC}/cross/gcc-7.2.0/arm
PATH_GCC_CORTEX7=${PATH_TOOLS_GCC}/cross/gcc-M7-5.4.1/arm
PATH_GCC_RISC532=${PATH_TOOLS_GCC}/cross/gcc-5.2.0/risc5
PATH_GCC_GPUTILS=${PATH_TOOLS_GCC}/cross/gputils-1.5.0-1
PATH_GCC_SDCCPIC=${PATH_TOOLS_GCC}/cross/sdcc-3.6.0

PATH=${PATH}:${PATH_TOOLS_UNIX}
PATH=${PATH}:${PATH_TOOLS_GCC}/cross/openocd-0.10.0/bin
PATH=${PATH}:${PATH_TOOLS_GCC}/cross/doxygen-1.8.13/bin
PATH=${PATH}:${PATH_TOOLS_GCC}/cross/graphviz-2.40.1/bin
PATH=${PATH}:${PATH_GCC_ICYFLEX}/bin
PATH=${PATH}:${PATH_GCC_COLFIRE}/bin
PATH=${PATH}:${PATH_GCC_MC6833X}/bin
PATH=${PATH}:${PATH_GCC_BLAKFIN}/bin
PATH=${PATH}:${PATH_GCC_CORTEX3}/bin
PATH=${PATH}:${PATH_GCC_CORTEX7}/bin
PATH=${PATH}:${PATH_GCC_RISC532}/bin
PATH=${PATH}:${PATH_GCC_GPUTILS}/bin
PATH=${PATH}:${PATH_GCC_SDCCPIC}/bin

export PATH_FTDI_INCLUDES
export PATH_FTDI_LIBRARIES
export PATH_TOOLS_GCC
export PATH_TOOLS_UNIX
export PATH_UKOS_KERNEL
export PATH_GCC_ICYFLEX
export PATH_GCC_COLFIRE
export PATH_GCC_MC6833X
export PATH_GCC_BLAKFIN
export PATH_GCC_CORTEX3
export PATH_GCC_CORTEX7
export PATH_GCC_RISC532
export PATH_GCC_GPUTILS
export PATH_GCC_SDCCPIC

export PATH

Bash as a default
.................

ls -al bin/sh
sudo dpkg-reconfigure dash
Chose <no>

Installation os some necessary packages
.......................................

sudo apt-get install build-essential
sudo apt-get install libtool bison flex gawk m4 texinfo automake
sudo apt-get install libncurses-dev libusb-1.0-0-dev libusb-dev zlib1g-dev
sudo apt-get install cmake
sudo apt-get install gtkterm
sudo apt-get install libpcre3 libpcre3-dev
sudo apt-get install libgl1-mesa-dev
sudo apt install git
sudo apt-get install libvte-dev intltool build-essential libgtk2.0-dev
sudo apt-get install ttf-mscorefonts-installer culmus

Not sure that the following steps are necessary
...............................................

sudo -i
cd /etc/apt/sources.list.d
echo "deb http://old-releases.ubuntu.com/ubuntu/ raring main restricted universe multiverse" >ia32-libs-raring.list
apt-get update
apt-get install ia32-libs
sudo apt-get install libgl1-mesa-dri:i386
sudo apt-get install ia32-libs-multiarch:i386
sudo apt-get install ia32-libs-multiarch
sudo apt-get install ia32-libs

To make visible the serial devices (reboot the machine to make active)
......................................................................

sudo usermod -a -G dialout ukos

Paths to set-up in the eclipse
..............................

PATH_GCC_XYZ = ${PATH_TOOLS_GCC}/cross/gcc-a.b.c/xyz
PATH_BIN     = ${PATH_TOOLS_UNIX}
PATH_SRC     = ${PATH_UKOS_KERNEL}

Sequence of operations
......................

1. Create the .bash_aliases
2. Install the necessary packages

3. Build the gcc's versions:
	sh ukos_arm_eabi.sh
	sh ukos_bfin.sh
	sh ukos_coldfire.sh
	sh ukos_cpu32.sh
	sh ukos_icfx1.sh

4. Build the openocd:
	sh ukos_D2XX.sh
	sh ukos_openocd.sh

5. Build the graphviz & doxygen:
	sh ukos_graphviz.sh
	sh ukos_doxygen.sh

6. Build the tools for 8-bits cpus:
	sh ukos_boost_libraries
	sh ukos_gputils.sh
	sh ukos_sdcc.sh
	sh ukos_pic.sh

Prepare for your target
.......................

In the folder ${PATH_UKOS_KERNEL}/Systems you can find some sh scripts to
set-up the environment for your target. Just execute one of them.

sh clean	for cleaning the project
sh build	for building the project

